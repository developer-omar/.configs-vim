snippet php
<?php

$1
endsnippet

snippet if
if(${1:expr}) {
  $2
}
endsnippet

snippet if1
if(${1:expr})
  $2
endsnippet

snippet ifelse
if(${1:expr}) {
	$2
} else {
	$3
}
endsnippet

snippet elseif
elseif(${1:expr}) {
  $2
}
endsnippet

snippet while
while(${1:condition}) {
	$2
}
endsnippet

snippet for
for ($${1:i} = 0; $$1 < $${2:count}; $$1${3:++}) {
  $4
}
endsnippet

snippet foreach
foreach(${1:iterable_expression} as ${2:value}) {
	$3
}
endsnippet

snippet foreachkv
foreach (${1:iterable_expression} as ${2:key} => ${3:value}) {
  $4
}
endsnippet

snippet trycatch
try {
  $1
} catch (\Exception $e) {
  $2
}
endsnippet

snippet switch
switch ($${1:variable}) {
  case '${2:value}':
    ${3}
    break;
  default:
    ${4}
    break;
}
endsnippet

snippet case
case '${1:value}':
  ${0:${VISUAL}}
  break;
endsnippet

snippet class
class ${1:`vim_snippets#Filename()`} {

  ${2:public} function __construct($3) {
    $4
  }
}
endsnippet

snippet attr
${1:public} $${2:name};
endsnippet

snippet this
$this->${1:name}
endsnippet

snippet pubf
public function ${1:name}($2) {
  $3
}
endsnippet

snippet prif
private function ${1:name}($2) {
  $3
}
endsnippet

snippet prof
protected function ${1:name}($2) {
  $3
}
endsnippet

snippet getter
public function get${1:Name}() {
  return $this->${2:$1};
}
endsnippet

snippet setter
public function set${1:Name}($${2:name}) {
  $this->$2 = $$2;
  return $this;
}
endsnippet